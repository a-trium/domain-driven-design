// Code generated by go-swagger; DO NOT EDIT.

package swagserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Gateway",
    "version": "0.0.1"
  },
  "basePath": "/api",
  "paths": {
    "/auth/login": {
      "$ref": "./gateway-auth.yaml#/api/login"
    },
    "/auth/logout": {
      "$ref": "./gateway-auth.yaml#/api/logout"
    },
    "/auth/register": {
      "$ref": "./gateway-auth.yaml#/api/register"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Gateway",
    "version": "0.0.1"
  },
  "basePath": "/api",
  "paths": {
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/loginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "Logout",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "Register",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/registerRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/empty"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "empty": {
      "type": "object"
    },
    "error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "InvalidSession",
            "InternalServer",
            "BadFilterRequest",
            "RecordDoesNotxist"
          ]
        }
      }
    },
    "loginRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "registerRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    }
  }
}`))
}
